#!/bin/sh
#
#
#	Resource Agent for AWS EC2 ENI
#
# Copyright (c) 2014 mooapp All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="eni" version="0.9">
<version>1.0</version>

<longdesc lang="en">
This is a Resource Agent for AWS EC2 ENI (Elastic IP Address). 
</longdesc>
<shortdesc lang="en">AWS EC2 EIP resource agent</shortdesc>

<parameters>
<parameter name="interface_id" required="1">
<longdesc lang="en">
The network interface id of ENI
</longdesc>
<shortdesc lang="en">ENI id</shortdesc>
<content type="string" />
</parameter>

<parameter name="device_index">
<longdesc lang="en">
The index of the device for the network interface attachment.
</longdesc>
<shortdesc lang="en">device index</shortdesc>
<content type="integer" default="1" />
</parameter>

<parameter name="device_name">
<longdesc lang="en">
The name of the device for the network interface attachment.
</longdesc>
<shortdesc lang="en">device index</shortdesc>
<content type="string" default="eth1" />
</parameter>

<parameter name="private_ip" required="1">
<longdesc lang="en">
The private ip address for the network interface attachment.
</longdesc>
<shortdesc lang="en">private ip</shortdesc>
<content type="string" />
</parameter>

<parameter name="netmask" required="1">
<longdesc lang="en">
The netmask for the network interface attachment.
</longdesc>
<shortdesc lang="en">netmask</shortdesc>
<content type="string" />
</parameter>


<parameter name="gateway" required="1">
<longdesc lang="en">
The gateway of the device for the network interface attachment.
</longdesc>
<shortdesc lang="en">gateway</shortdesc>
<content type="string" />
</parameter>

<parameter name="wait">
<longdesc lang="en">
The wait time after starting and stopping interface in order to handle delay.
</longdesc>
<shortdesc lang="en">wait</shortdesc>
<content type="integer" default="30" />
</parameter>

<parameter name="table_id">
<longdesc lang="en">
The table id for multi homing.
</longdesc>
<shortdesc lang="en">table id</shortdesc>
<content type="integer" default="100" />
</parameter>

<parameter name="table_priority">
<longdesc lang="en">
The table priority for multi homing.
</longdesc>
<shortdesc lang="en">table priority</shortdesc>
<content type="integer" default="100" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="monitor"      timeout="20" interval="10" depth="0" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="20" />
</actions>
</resource-agent>
END
}

#######################################################################

eni_usage() {
	cat <<END
usage: $0 {start|stop|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

eni_start() {
    eni_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi
     
    #Detach existing
    attachment_id=`/usr/bin/aws ec2 describe-network-interfaces --network-interface-ids ${OCF_RESKEY_interface_id} --query 'NetworkInterfaces[0].Attachment' --output json | grep \"AttachmentId\": | sed -e 's/'.*\"AttachmentId\"':\s\"\(.*\)\"\,\s$/\1/'`
    /usr/bin/aws ec2 detach-network-interface --attachment-id ${attachment_id}
    sleep ${OCF_RESKEY_wait}

    /usr/bin/aws ec2 attach-network-interface --network-interface-id ${OCF_RESKEY_interface_id} --instance-id ${instance_id} --device-index ${OCF_RESKEY_device_index}
    sleep ${OCF_RESKEY_wait}

    /sbin/ifconfig ${OCF_RESKEY_device_name} ${OCF_RESKEY_private_ip} netmask ${OCF_RESKEY_netmask} up

    ip rule add from ${OCF_RESKEY_private_ip} table ${OCF_RESKEY_table_id} prio ${OCF_RESKEY_table_priority}
    ip route add default via ${OCF_RESKEY_gateway} dev ${OCF_RESKEY_device_name} table ${OCF_RESKEY_table_id}
    ip route add default via ${OCF_RESKEY_gateway} dev ${OCF_RESKEY_device_name} metric ${OCF_RESKEY_table_priority}

    #ip rule add from ${private_ip} table ${OCF_RESKEY_table_id} prio ${OCF_RESKEY_table_priority}
    #ip route add via ${OCF_RESKEY_gateway} dev ${OCF_RESKEY_device_name} src ${private_ip} table ${OCF_RESKEY_table_id}
}

eni_stop() {
    eni_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	ip rule delete from ${OCF_RESKEY_private_ip} table ${OCF_RESKEY_table_id} prio ${OCF_RESKEY_table_priority}
    	ip route delete default via ${OCF_RESKEY_gateway} dev ${OCF_RESKEY_device_name} table ${OCF_RESKEY_table_id}
    	ip route delete default via ${OCF_RESKEY_gateway} dev ${OCF_RESKEY_device_name} metric ${OCF_RESKEY_table_priority}
        #ip rule del table ${OCF_RESKEY_table_id}
	#This doesn't work if the stop doesn't occur on the active machine -- need to determine if that matters,reverting for now.
        attachment_id=`/usr/bin/aws ec2 describe-network-interfaces --network-interface-ids ${OCF_RESKEY_interface_id} --filter "Name=attachment.instance-id, Values=${instance_id}" --output json | grep \"AttachmentId\": | sed -e 's/'.*\"AttachmentId\"':\s\"\(.*\)\"\,\s$/\1/'`
        #attachment_id=`/usr/bin/aws ec2 describe-network-interfaces --network-interface-ids ${OCF_RESKEY_interface_id} --query 'NetworkInterfaces[0].Attachment' --output json | grep \"AttachmentId\": | sed -e 's/'.*\"AttachmentId\"':\s\"\(.*\)\"\,\s$/\1/'`
	
        /usr/bin/aws ec2 detach-network-interface --attachment-id ${attachment_id} 
        sleep ${OCF_RESKEY_wait}
    fi
    return $OCF_SUCCESS
}

eni_monitor() {
    mon=`/usr/bin/aws ec2 describe-network-interfaces --network-interface-ids ${OCF_RESKEY_interface_id} --filter "Name=attachment.instance-id, Values=${instance_id}" --output json | grep ${instance_id} | wc -l`
    if [ $mon -ne 0  ]; then
        return $OCF_SUCCESS
    fi
    return $OCF_NOT_RUNNING
}

eni_validate() {
    return $OCF_SUCCESS
}

instance_id=`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id`

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		eni_start;;
stop)		eni_stop;;
monitor)	eni_monitor;;
validate-all)   eni_validate;;
usage|help)	eni_usage
		exit $OCF_SUCCESS
		;;
*)		eni_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

